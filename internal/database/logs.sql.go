// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: logs.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createExerciseLog = `-- name: CreateExerciseLog :one
INSERT INTO workout_exercise_logs (exercise_session_id, set_number, reps, weight, interval_sec, notes)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, exercise_session_id, set_number, reps, weight, interval_sec, notes, created_at
`

type CreateExerciseLogParams struct {
	ExerciseSessionID uuid.UUID
	SetNumber         int32
	Reps              int32
	Weight            string
	IntervalSec       int32
	Notes             sql.NullString
}

func (q *Queries) CreateExerciseLog(ctx context.Context, arg CreateExerciseLogParams) (WorkoutExerciseLog, error) {
	row := q.db.QueryRowContext(ctx, createExerciseLog,
		arg.ExerciseSessionID,
		arg.SetNumber,
		arg.Reps,
		arg.Weight,
		arg.IntervalSec,
		arg.Notes,
	)
	var i WorkoutExerciseLog
	err := row.Scan(
		&i.ID,
		&i.ExerciseSessionID,
		&i.SetNumber,
		&i.Reps,
		&i.Weight,
		&i.IntervalSec,
		&i.Notes,
		&i.CreatedAt,
	)
	return i, err
}

const createSessionLog = `-- name: CreateSessionLog :one
INSERT INTO session_logs (user_id, workout_session_id, workout_exercise_logs_id, log_type, log_priority, log_message)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, user_id, workout_session_id, workout_exercise_logs_id, log_type, log_priority, log_message, created_at
`

type CreateSessionLogParams struct {
	UserID                uuid.UUID
	WorkoutSessionID      uuid.UUID
	WorkoutExerciseLogsID uuid.NullUUID
	LogType               string
	LogPriority           string
	LogMessage            string
}

func (q *Queries) CreateSessionLog(ctx context.Context, arg CreateSessionLogParams) (SessionLog, error) {
	row := q.db.QueryRowContext(ctx, createSessionLog,
		arg.UserID,
		arg.WorkoutSessionID,
		arg.WorkoutExerciseLogsID,
		arg.LogType,
		arg.LogPriority,
		arg.LogMessage,
	)
	var i SessionLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.WorkoutSessionID,
		&i.WorkoutExerciseLogsID,
		&i.LogType,
		&i.LogPriority,
		&i.LogMessage,
		&i.CreatedAt,
	)
	return i, err
}

const getExerciseLogsForSession = `-- name: GetExerciseLogsForSession :many
SELECT sel.id, sel.set_number, sel.reps, sel.weight, sel.interval_sec, sel.notes, sel.created_at
FROM workout_exercise_logs sel
JOIN exercise_session wes ON wes.id = sel.exercise_session_id
WHERE wes.workout_session_id = $1
ORDER BY sel.set_number
`

type GetExerciseLogsForSessionRow struct {
	ID          uuid.UUID
	SetNumber   int32
	Reps        int32
	Weight      string
	IntervalSec int32
	Notes       sql.NullString
	CreatedAt   time.Time
}

func (q *Queries) GetExerciseLogsForSession(ctx context.Context, workoutSessionID uuid.UUID) ([]GetExerciseLogsForSessionRow, error) {
	rows, err := q.db.QueryContext(ctx, getExerciseLogsForSession, workoutSessionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetExerciseLogsForSessionRow
	for rows.Next() {
		var i GetExerciseLogsForSessionRow
		if err := rows.Scan(
			&i.ID,
			&i.SetNumber,
			&i.Reps,
			&i.Weight,
			&i.IntervalSec,
			&i.Notes,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
